#lang racket

(require 2htdp/universe)
(require 2htdp/image)

(define (2d_vec_set! vec x y val)
  (vector-set! (vector-ref vec (- x 1)) (- y 1) val))

(define (2d_vec_get vec x y)
  (vector-ref (vector-ref vec (- x 1)) (- y 1)))

(define (2d_vec_init r c val)
  (build-vector r (lambda (num) (make-vector c val))))

(define (in_range val low high)
  (and (<= val high) (<= low val)))

(define xlp1 177)
(define xhp1 220)
(define ylp1 224)
(define yhp1 243)
(define xlp2 177)
(define xhp2 220)
(define ylp2 255)
(define yhp2 275)
(define board-img (scale (/ 400 2209) (bitmap "Go_board_9x9.png")))
(define black-stone (circle 15 "solid" "black"))
(define white-stone (circle 15 "solid" "white"))
(define go-text (text/font "GO" 50 "black" "Gill Sans" "modern" "normal" "bold" #f))
(define pick-color-text (text/font "PICK COLOR" 20 "black"
                                   "Gill Sans" "modern" "normal"
                                   "bold" #f))
(define stone-choice (above (crop 0 0 80 40 (circle 40 "solid" "black"))
                            (crop 0 40 80 40 (circle 40 "solid" "white"))))
(define player-choice (above (text/font "1 PLAYER" 20 "black"
                                        "Gill Sans" "modern" "normal"
                                        "bold" #f)
                             (text/font "2 PLAYER" 20 "black"
                                        "Gill Sans" "modern" "normal"
                                        "bold" #f)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;This function generates the best possible move given the board_pos and for the
;clr(1 for white and 2 black)
;or else return (-1 -1) if there is no possible move and wants to pass
(define (generate_move board_pos clr)
  (define (tryh i j)
    (if (check_valid i j clr board_pos) (cons i j)
        (cond
          [(< i (vector-length board_pos)) (tryh (+ 1 i) j)]
          [(< j (vector-length board_pos)) (tryh i (+ j 1))]
          [else (cons -1 -1)])))
  (tryh 1 1))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;this checks if the board is already filled at that position
;is yes return true, else check the complicated rules like ko, dragon and so on
(define (check_valid x y clr board_pos)
  (if (equal? (2d_vec_get board_pos x y) 0) #t #f))


(define board_state%
  (class object%
    (define size 9)
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    ;Board representation
    ;0 -> No stone present
    ;1 -> White Stone
    ;2 -> Black Stone
    (define board_pos (2d_vec_init size size 0))
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    ;Stores the moves such that we can get the latest move by (car moves)
    ;The moves are of the form (cx, cy, ply) where plyr is 1 or 2
    (define moves '())
    (define 1_player #t)  ;;if the game is two player then this is false
    (define 1_player_clr 2)  ;;which color has the 1st playr chose (black by default)
    (define turn 1)  ;;can be 1 or 2 depending on whose turn(starting with always one)
    (define error_msg "")  ;;the error msg will be stored here
    (define last_mv_pass #f)
    (define state 0)

    (define/public (set_1_player! val)
      (begin
        (display val)
        (newline)
        (set! state 1)
        (set! 1_player val)))

    (define/public (set_1_player_clr! clr)
      (begin
        (display clr)
        (newline)
        (set! state 2)
        (set! 1_player_clr clr)))

    (define (get_plyr_clr plyr)
      (if (= plyr 1) 1_player_clr
          (if (= 1 1_player_clr) 2 1)))  ;;gives the color of the current player

    (define (next_turn turn)
      (if (= turn 1) 2 1))

    ;;this function works differently for the cases of pass and no pass
    ;(define (undo)
    ;  ())

    (define (moveh! x y turn)
      (begin
        (set! last_mv_pass #f)
        (2d_vec_set! board_pos x y (get_plyr_clr turn))
        (set! moves (cons '(x y turn) moves))
        (set! turn (next_turn turn))))

    (define (computer!)
      (let*
          ([comp_move (generate_move board_pos (get_plyr_clr turn))]
           [xc (car comp_move)]
           [yc (cdr comp_move)])
        (cond
          [(and (= xc -1) (= yc -1))
           (if last_mv_pass (end_game)
               (begin
                 (set! last_mv_pass #t)
                 (set! moves (cons '(x y turn) moves))
                 (set! turn (next_turn turn))))]
          [else (moveh! xc yc turn)])))

    (define/public (move! x y)
      (if (check_valid x y (get_plyr_clr turn) board_pos) ;;if the move played by the player is indeed valid
          (begin
            (set! error_msg "")
            (moveh! x y turn)
            (cond
              [1_player (computer!)]))
          (set! error_msg "Illegal Move man")))

    (define/public (pass)
      (if last_mv_pass (end_game)
          (begin
            (set! last_mv_pass #t)
            (set! moves (cons '(-1 -1 turn) moves))
            (set! turn (next_turn turn))
            (cond
              [1_player (computer!)]))))

    (define (to_draw_start)
      (overlay/offset
       player-choice
       0 -50
       (overlay
        (rectangle 350 350
                   "outline"
                   "black")
        (overlay/offset
         go-text 0 135
         (empty-scene
          400 400
          (color 220 179 92))))))

    (define (to_draw_pick_col)
      (overlay/offset
       stone-choice
       0 -50
       (overlay/offset
        pick-color-text 0 50
        (overlay
         (rectangle 350 350
                    "outline"
                    "black")
         (overlay/offset
          go-text 0 135
          (empty-scene
           400 400
           (color 220 179 92)))))))

    (define (to_draw_board)
      (text (symbol->string 'The_board) 40 'red))

    (define (to_draw_end)
      (text (symbol->string 'The_end) 40 'red))

    (define (end_game)
      (begin
        (set! state 3)
        (set! error_msg "The game is over now")))

    (define/public (to_draw)
      (cond
        [(= state 0) (to_draw_start)]
        [(= state 1) (to_draw_pick_col)]
        [(= state 2) (to_draw_board)]
        [else (to_draw_end)]))

    (define/public (on_mouse x y)
      (cond
        [(= state 0)
         (cond
           [(and (in_range x xlp1 xhp1) (in_range y ylp1 yhp1)) (set_1_player! #t)]
           [(and (in_range x xlp2 xhp2) (in_range y ylp2 yhp2)) (set_1_player! #f)])]
        [(= state 1)
         (cond
           [(and (in_range x xlp1 xhp1) (in_range y ylp1 yhp1)) (set_1_player_clr! 2)]
           [(and (in_range x xlp2 xhp2) (in_range y ylp2 yhp2)) (set_1_player_clr! 1)])]))

    (super-new)))

(define go_board (new board_state%))

(define (render board)
  (send board to_draw))

(define (try_mouse board x y click)
  (cond
    [(equal? click "button-down" ) (begin
                                     (send board on_mouse x y)
                                     board)]
    [else board]))

(big-bang go_board
  (to-draw render)
(on-mouse try_mouse))
